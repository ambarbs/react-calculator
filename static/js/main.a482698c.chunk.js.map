{"version":3,"sources":["components/calculator/Calculator.js","components/app/App.styles.js","components/app/App.js","serviceWorker.js","index.js","components/calculator/utils.js","components/calculator/Calculator.styles.js"],"names":["Calculator","useState","displayText","setDisplayText","operator","setOperator","operand1","setOperand1","operand2","setOperand2","console","log","handleClick","e","value","target","innerText","operatorMap","val","Number","eval","parseFloat","toFixed","numberWithCommas","includes","s1","s2","getFontSize","text","length","fontSize","keys","map","key","bgColor","color","onClick","AppWrapper","styled","div","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","isOperator","operands","parseInt","x","toString","replace","CalculatorWrapper","DisplayLabel","label","props","KeyPadWrapper","section","KeyWrapper","width","borderRadius","gridColumn"],"mappings":"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","file":"static/js/main.a482698c.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {\r\n    CalculatorWrapper,\r\n    DisplayLabel,\r\n    KeyPadWrapper,\r\n    KeyWrapper,\r\n} from \"./Calculator.styles\";\r\nimport {keys, numberWithCommas, operatorMap} from \"./utils\";\r\n\r\n\r\n\r\nconst Calculator = () => {\r\n    const [displayText, setDisplayText] = useState(\"\");\r\n    const [operator, setOperator] = useState('');\r\n    const [operand1, setOperand1] = useState('');\r\n    const [operand2, setOperand2] = useState('');\r\n    console.log(\"displayText \", displayText);\r\n\r\n    const handleClick = (e) => {\r\n        const value = e.target.innerText;\r\n        switch (value) {\r\n            case '+':\r\n            case '-':\r\n            case 'x':\r\n            case 'รท':\r\n            case '%':\r\n                setOperator(operatorMap[value]);\r\n                break;\r\n            case '=':\r\n                // eslint-disable-next-line no-eval\r\n                let val = Number(eval(`${operand1} ${operator} ${operand2}`));\r\n                val =val % 1 === 0? val : parseFloat(val.toFixed(8));\r\n                setDisplayText(numberWithCommas(val));\r\n                setOperator('');\r\n                break;\r\n            case '0':\r\n            case '1':\r\n            case '2':\r\n            case '3':\r\n            case '4':\r\n            case '5':\r\n            case '6':\r\n            case '7':\r\n            case '8':\r\n            case '9':\r\n            case '.':\r\n                if(value === '.' && displayText.includes('.')) return;\r\n                if(operator === ''){\r\n                    let s1 = `${operand1}${value}`;\r\n                    setOperand1(s1);\r\n                    setDisplayText(numberWithCommas(s1));\r\n                } else {\r\n                    let s2 = `${operand2}${value}`;\r\n                    setOperand2(s2);\r\n                    setDisplayText(numberWithCommas(s2));\r\n                }\r\n                break;\r\n            case 'c':\r\n                setOperator('');\r\n                setOperand1('');\r\n                setOperand2('');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const getFontSize = (text) => {\r\n        switch (true) {\r\n            case text.length < 5:\r\n                return '4rem';\r\n            case text.length < 12:\r\n                return '3rem';\r\n            default:\r\n                return '2rem';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CalculatorWrapper>\r\n            <DisplayLabel\r\n                fontSize={getFontSize(displayText)}\r\n            >{displayText}</DisplayLabel>\r\n            <KeyPadWrapper>\r\n                {keys.map((key) => (\r\n                    <KeyWrapper\r\n                        key={key.value}\r\n                        bgColor={key.bgColor}\r\n                        color={key.color}\r\n                        onClick={(e) => {\r\n                            handleClick(e);\r\n                        }}\r\n                    >\r\n                        {key.value}\r\n                    </KeyWrapper>\r\n                ))}\r\n            </KeyPadWrapper>\r\n        </CalculatorWrapper>\r\n    );\r\n};\r\n\r\nexport default Calculator;\r\n","import styled from 'styled-components';\r\n\r\nexport const AppWrapper = styled.div`\r\n  //background-color: #38423f;\r\n  background-size: cover;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  height: 100vh;\r\n  @media (max-width: 576px) {\r\n    flex-direction: column;\r\n  }\r\n`\r\n","import React from 'react';\nimport '../../App.css';\nimport {AppWrapper} from \"./App.styles\";\nimport Calculator from \"../calculator/Calculator\";\n\nfunction App() {\n  return (\n    <AppWrapper>\n      <Calculator/>\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const keys = [\r\n    {\r\n        value: \"C\",\r\n        bgColor: \"#A5A5A5\",\r\n        color: \"black\",\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"+/-\",\r\n        bgColor: \"#A5A5A5\",\r\n        color: \"black\",\r\n        isOperator: true,\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"%\",\r\n        bgColor: \"#A5A5A5\",\r\n        color: \"black\",\r\n        isOperator: true,\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"รท\",\r\n        bgColor: \"#333333\",\r\n        color: \"white\",\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"7\",\r\n        bgColor: \"#333333\",\r\n        color: \"white\",\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"8\",\r\n        bgColor: \"#333333\",\r\n        color: \"white\",\r\n\r\n        onClick: (e) => console.log(\"8 pressed\"),\r\n    },\r\n    {\r\n        value: \"9\",\r\n        bgColor: \"#333333\",\r\n        color: \"white\",\r\n\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"x\",\r\n        bgColor: \"orange\",\r\n        color: \"white\",\r\n\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"4\",\r\n        bgColor: \"#333333\",\r\n        color: \"white\",\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"5\",\r\n        bgColor: \"#333333\",\r\n        color: \"white\",\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"6\",\r\n        bgColor: \"#333333\",\r\n        color: \"white\",\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"-\",\r\n        bgColor: \"orange\",\r\n        color: \"white\",\r\n\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"1\",\r\n        bgColor: \"#333333\",\r\n        color: \"white\",\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"2\",\r\n        bgColor: \"#333333\",\r\n        color: \"white\",\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"3\",\r\n        bgColor: \"#333333\",\r\n        color: \"white\",\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"+\",\r\n        bgColor: \"orange\",\r\n        color: \"white\",\r\n        isOperator: true,\r\n        onClick: (e, setDisplayText, operands = []) => {\r\n            setDisplayText(parseInt(operands[0], 10) + parseInt(operands[1], 10))\r\n\r\n        },\r\n    },\r\n    {\r\n        value: \"0\",\r\n        bgColor: \"#333333\",\r\n        color: \"white\",\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \".\",\r\n        bgColor: \"#333333\",\r\n        color: \"white\",\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n    {\r\n        value: \"=\",\r\n        bgColor: \"orange\",\r\n        color: \"white\",\r\n        onClick: (e) => console.log(\"7 pressed\"),\r\n    },\r\n];\r\n\r\nexport const operatorMap = {\r\n    '+': '+',\r\n    '-': '-',\r\n    'รท': '/',\r\n    'x': '*',\r\n    '%': '%',\r\n}\r\n\r\nexport const numberWithCommas = x =>\r\n    x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n","import styled from \"styled-components\";\r\n\r\nexport const CalculatorWrapper = styled.div`\r\n  background-color: black;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  width: 35vw;\r\n\r\n  @media only screen and (max-width: 576px) {\r\n    width: 60vw;\r\n  }\r\n`;\r\n\r\nexport const DisplayLabel = styled.label`\r\n  width: 100%;\r\n  height: 6rem;\r\n  color: white;\r\n  font-size: ${(props) => props.fontSize};\r\n  text-align: right;\r\n`;\r\n\r\nexport const KeyPadWrapper = styled.section`\r\n  display: grid;\r\n  justify-content: center;\r\n  width: 100%;\r\n  grid-template-columns: repeat(4, auto);\r\n  grid-template-rows: repeat(5, auto);\r\n  grid-gap: 1rem;\r\n`;\r\n\r\nexport const KeyWrapper = styled.div`\r\n  width: ${(props) => props.width || \"7vw\"};\r\n  height: 7vw;\r\n  border-radius: ${(props) => props.borderRadius || \"50%\"};\r\n  background-color: ${(props) => props.bgColor};\r\n  color: ${(props) => props.color};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-weight: 400;\r\n  font-size: 1.5rem;\r\n  grid-column: ${(props) => props.gridColumn};\r\n  cursor: pointer;\r\n  &:nth-child(17) {\r\n    width: auto;\r\n    border-radius: 50px;\r\n    grid-column: 1/span 2;\r\n  }\r\n  @media only screen and (max-width: 576px) {\r\n    width: 11vw;\r\n    height: 11vw;\r\n    font-weight: 400;\r\n    font-size: 1.25rem;\r\n  }\r\n`;\r\n"],"sourceRoot":""}